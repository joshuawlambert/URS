---
title: "Shiny for Python with WebAssembly"
format: 
  html:
    theme: cosmo
    css: styles.css
filters:
  - shinylive
---

```{shinylive-python}
#| standalone: true

from shiny import App, render, ui
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

app_ui = ui.page_fluid(
    ui.h2("Interactive Data Analysis"),
    ui.row(
        ui.column(4,
            ui.input_slider("n", "Number of points", 10, 100, 50),
            ui.input_select(
                "dist", 
                "Distribution",
                {"norm": "Normal", "unif": "Uniform", "exp": "Exponential"}
            )
        ),
        ui.column(8,
            ui.output_plot("histogram"),
            ui.output_table("summary")
        )
    )
)

def server(input, output, session):
    @output
    @render.plot
    def histogram():
        n = input.n()
        if input.dist() == "norm":
            data = np.random.normal(0, 1, n)
        elif input.dist() == "unif":
            data = np.random.uniform(-3, 3, n)
        else:
            data = np.random.exponential(1, n)
            
        fig, ax = plt.subplots(figsize=(8, 6))
        ax.hist(data, bins=20)
        ax.set_title(f"{input.dist()} Distribution")
        return fig
    
    @output
    @render.table
    def summary():
        n = input.n()
        if input.dist() == "norm":
            data = np.random.normal(0, 1, n)
        elif input.dist() == "unif":
            data = np.random.uniform(-3, 3, n)
        else:
            data = np.random.exponential(1, n)
            
        return pd.DataFrame({
            'Statistic': ['Mean', 'Std Dev', 'Min', 'Max'],
            'Value': [
                round(np.mean(data), 3),
                round(np.std(data), 3),
                round(np.min(data), 3),
                round(np.max(data), 3)
            ]
        })

app = App(app_ui, server)
```