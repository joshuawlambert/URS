{
  "cells": [
    {
      "cell_type": "raw",
      "metadata": {},
      "source": [
        "---\n",
        "title: Shiny for Python with WebAssembly\n",
        "format:\n",
        "  html:\n",
        "    theme: cosmo\n",
        "    css: styles.css\n",
        "    server: shiny\n",
        "---"
      ],
      "id": "cd50274d"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from shiny import App, render, ui\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "app_ui = ui.page_fluid(\n",
        "    ui.h2(\"Interactive Data Analysis\"),\n",
        "    ui.layout_sidebar(\n",
        "        sidebar=ui.sidebar(\n",
        "            ui.input_slider(\"n\", \"Number of points\", 10, 100, 50),\n",
        "            ui.input_select(\n",
        "                \"dist\", \n",
        "                \"Distribution\",\n",
        "                {\"norm\": \"Normal\", \"unif\": \"Uniform\", \"exp\": \"Exponential\"}\n",
        "            )\n",
        "        ),\n",
        "        main=ui.output_plot(\"histogram\"),\n",
        "    ),\n",
        "    ui.output_table(\"summary\")\n",
        ")\n",
        "\n",
        "def server(input, output, session):\n",
        "    @output\n",
        "    @render.plot\n",
        "    def histogram():\n",
        "        n = input.n()\n",
        "        if input.dist() == \"norm\":\n",
        "            data = np.random.normal(0, 1, n)\n",
        "        elif input.dist() == \"unif\":\n",
        "            data = np.random.uniform(-3, 3, n)\n",
        "        else:\n",
        "            data = np.random.exponential(1, n)\n",
        "            \n",
        "        plt.figure()\n",
        "        plt.hist(data, bins=20)\n",
        "        plt.title(f\"{input.dist()} Distribution\")\n",
        "        return plt\n",
        "    \n",
        "    @output\n",
        "    @render.table\n",
        "    def summary():\n",
        "        n = input.n()\n",
        "        if input.dist() == \"norm\":\n",
        "            data = np.random.normal(0, 1, n)\n",
        "        elif input.dist() == \"unif\":\n",
        "            data = np.random.uniform(-3, 3, n)\n",
        "        else:\n",
        "            data = np.random.exponential(1, n)\n",
        "            \n",
        "        return pd.DataFrame({\n",
        "            'Statistic': ['Mean', 'Std Dev', 'Min', 'Max'],\n",
        "            'Value': [\n",
        "                np.mean(data),\n",
        "                np.std(data),\n",
        "                np.min(data),\n",
        "                np.max(data)\n",
        "            ]\n",
        "        })\n",
        "\n",
        "app = App(app_ui, server)"
      ],
      "id": "899710f6",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}